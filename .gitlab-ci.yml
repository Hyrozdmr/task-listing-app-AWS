stages:
  - buildAndTest
  - push
  - deploy

services: 
  - postgres:alpine

variables:
  NODE_ENV: test
  POSTGRES_DB: test_db
  POSTGRES_USER: test
  POSTGRES_PASSWORD: postgres

  # Disables TLS, see https://gitlab.com/gitlab-org/gitlab-runner/-/issues/27300
  DOCKER_TLS_CERTDIR: "" 

  DOCKER_HOST: "tcp://docker:2375"

  CONTAINER_REGISTRY_URL: "placeholder-registry-url"
  CONTAINER_REPOSITORY_NAME: "placeholder-repo-name"

  S3_DEPLOY_BUCKET: "placeholder-deploy-bucket"
  ELASTIC_BEANSTALK_APP_NAME: "placeholder-app-name"
  ELASTIC_BEANSTALK_ENV_NAME: "placeholder-env-name"

buildAndTest:
  stage: buildAndTest
  image: node:12.0-alpine
  script:
    - echo "Install Angular dependencies"
    - npm ci
    - echo "Run Angular tests"
    - npm run test:coverage
    - echo "Install Express dependencies"
    - npm --prefix ./server ci
    - echo "Run Express linting"
    - npm --prefix ./server run lint
    - echo "Run migrations"
    - npm --prefix ./server run migrate
    - echo "Run Express tests"
    - npm --prefix ./server run coverage

push:
  stage: push
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  
  # "Docker in Docker" https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
  services:
    - docker:dind
  
  before_script:
    - curl -fsSL https://get.docker.com -o get-docker.sh 
    - sh ./get-docker.sh
    - docker --version
  script:
    - echo 'Login via AWS CLI'
    - aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin "$CONTAINER_REGISTRY_URL"
    - echo 'Build and push image'
    - docker build --tag "$CONTAINER_REGISTRY_URL/$CONTAINER_REPOSITORY_NAME:$CI_COMMIT_SHA" .
    - docker push "$CONTAINER_REGISTRY_URL/$CONTAINER_REPOSITORY_NAME:$CI_COMMIT_SHA"

deploy:
    stage: deploy
    image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
    before_script:
      - sh ./aws/create_dockerrun.sh
    script:
      - echo "Copying Dockerrun.aws.json to S3"
      - aws s3 cp Dockerrun.aws.json "s3://$S3_DEPLOY_BUCKET"
      # See https://docs.aws.amazon.com/cli/latest/reference/elasticbeanstalk/create-application-version.html
      - echo "Deploying new application version"
      - >
        aws elasticbeanstalk create-application-version
        --application-name "$ELASTIC_BEANSTALK_APP_NAME"
        --version-label "$CI_COMMIT_SHA"
        --source-bundle S3Bucket="$S3_DEPLOY_BUCKET",S3Key="Dockerrun.aws.json"
        --no-auto-create-application
      # See https://docs.aws.amazon.com/cli/latest/reference/elasticbeanstalk/update-environment.html
      - >
        aws elasticbeanstalk update-environment
        --application-name "$ELASTIC_BEANSTALK_APP_NAME"
        --environment-name "$ELASTIC_BEANSTALK_ENV_NAME"
        --version-label "$CI_COMMIT_SHA"
